Python适合开发哪些类型的应用？
    1.首选是网络应用，包括网站、后台服务等
    2.许多日常需要的小工具，包括系统管理员需要的脚本任务等

Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。

优点：
    1.Python是跨平台的，它可以运行在Windows、Mac和各种Linux/Unix系统上。在Windows上写Python程序，放到Linux上也是能够运行的。
    2.提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。
    用Python开发，许多功能不必从零编写，直接使用现成的即可。
    3.内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用

缺点：
    1.第一个缺点就是运行速度慢，和C程序相比非常慢，
    因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。
    2.第二个缺点就是代码不能加密。
    如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。


安装

    windows
        安装程序 添加环境变量
        Add Python 3.7 to PATH

    Mac
        方法一: 安装程序
        方法二: 安装了Homebrew，直接通过命令brew install python3安装

命令行模式和Python交互模式?

    1.直接打开CMD  就是命令行模式
    2.在命令行模式下敲命令python，就看到类似如下的一堆文本输出，然后就进入到Python交互模式，它的提示符是>>>。

    打开 关闭 交互式环境
    看到提示符>>>就表示我们已经在Python交互式环境中
    exit()并回车，就可以退出Python交互式环境

    命令行模式 只能执行.py文件
    交互模式 一行一行执行py命令

    Python交互模式的代码是输入一行，执行一行，
    而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。
    可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！

Python解释器 --（CPython 把python代码编译成C代码）
    1.安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。
    2.在命令行下运行python就是启动CPython解释器。
    3.CPython用>>>作为提示符。
