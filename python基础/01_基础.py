# 如果文件里有非ASCII字符，需要在第一行或第二行指定编码声明。
#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
语法规则
    1.没有规定的时候，缩进强制 4 空格格式。
    2.大小写敏感，严格区分大小写。
    3.单行注释以#号开头；多行注释以'''开头，'''结束。3引号多行注释
    4.如无 “：”符号的语句，每行为一条语句，可通过‘\’（续行符）再换行则换行的代码也属于同一条语句，
    如带“：”则缩进区域到下一条语句前为同一语句（代码块）。另外当有括号时，成对括号之间换行仍属于同一条语句（[],（）,{}）。
    5.弱类型（一般根据输入的内容判断变量类型）。
"""

"""
数据类型
    整数    1，100，-8080，0，等等
            计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，
            十六进制用0x前缀和0-9，a-f表示，例如：0xff00

    浮点数
            浮点数可以用数学写法，如1.23，3.14，-9.01，等等。
            整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。

    字符串
            字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。
            请注意，''或""本身只是一种表示方式，不是字符串的一部分，
            因此，字符串'abc'只有a，b，c这3个字符。
            如果'本身也是一个字符，那就可以用""括起来，
            比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。

            如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，
            'I\'m \"OK\"!' 表示的字符串内容是：I'm "OK"!
            转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\，

    布尔值
            一个布尔值只有True、False两种值，要么是True，要么是False，
            在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来
            布尔值可以用and、or和not运算。
    空值
            空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。

"""

'''

    变量
            种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。
            静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。

            a = 'ABC'
            Python解释器干了两件事情：
                在内存中创建了一个'ABC'的字符串；
                在内存中创建了一个名为a的变量，并把它指向'ABC'。

    常量
            常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：
            PI = 3.14159265359
            但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变
'''

'''
字符串编码
    ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
    如果统一成Unicode编码，乱码问题从此消失了。用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
    又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。

    计算机系统通用的字符编码工作方式：
    在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。

    Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符。
    把str变为以字节为单位的bytes
    Python对bytes类型的数据用带b前缀的单引号或双引号表示：x = b'ABC'
    区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。

    以Unicode表示的str通过encode()方法可以编码为指定的bytes.
    要把bytes变为str，就需要用decode()方法.
    bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节

    计算str包含多少个字符，可以用len()函数
    len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数
    1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。
    经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。

    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；

    第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。

    申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码

格式化

    方法1: 占位符

        在Python中，采用的格式化方式和C语言是一致的，用%实现
         'Hello, %s' % 'world'
         'Hi, %s, you have $%d.' % ('Michael', 1000000)'

         常见的占位符有：
            占位符	替换内容
                %d	整数
                %f	浮点数
                %s	字符串
                %x	十六进制整数

     方法2: format()
            另一种格式化字符串的方法是使用字符串的format()方法，
            它会用传入的参数依次替换字符串内的占位符{0}、{1}……，
            不过这种方式写起来比%要麻烦得多

            'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)


'''
# print('Hello,你好'\
# )
# a = 3
# b = 5
# print('3+5={:d}'.format(a+b))
# print("I'm OK")
# print('I\'m \"OK\"')
# print(True)
# print(False)
# print(3>2)
# print(not True)
# print(True and False)
# print(True or False)
#
# c='ABC' #解释器创建了字符串'ABC'和变量c，并把c指向'ABC'
# d =c    #解释器创建了变量d，并把d指向c指向的字符串'ABC'
# c='XYZ' #解释器创建了字符串'XYZ'，并把c的指向改为'XYZ'，但d并没有更改
# print(d) #d='ABC'
#
# print(ord('A'))
# print(chr(65))
print(b'ABC'.decode('ascii'))
print(b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8'))
print( b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore'))
print(len('ABCD'))

print('Hello, {0}, 成绩提升了 {1:.2f}%'.format('小明', 17.125))
